/****************************************************************************
 *
 * Copyright (c) 2015, 2016 Gus Grubba. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
 * @file mavesp8266_config.h
 * ESP8266 Wifi AP, MavLink UART/UDP Bridge
 *
 * @author Gus Grubba <mavlink@grubba.com>
 */

#ifndef MAVESP8266_CONFIG_H
#define MAVESP8266_CONFIG_H

#include "config.h"     // auto-generated by the build system

#define DEFAULT_UART_SPEED          CONFIG_DEFAULT_UART_SPEED
#define DEFAULT_WIFI_CHANNEL        CONFIG_DEFAULT_WIFI_AP_CHANNEL
#define DEFAULT_UDP_HPORT           CONFIG_DEFAULT_UDP_GCS_PORT
#define DEFAULT_UDP_CPORT           CONFIG_DEFAULT_UDP_VEHICLE_PORT
 
#define HEARTBEAT_TIMEOUT           (CONFIG_HEARTBEAT_TIMEOUT * 1000)
#define WIFI_CLIENT_TIMEOUT         CONFIG_WIFI_CLIENT_TIMEOUT

#define WIFI_MODE_AP 0
#define WIFI_MODE_STA 1

#if defined(CONFIG_WIFI_MODE_AP)
#  define DEFAULT_WIFI_MODE       WIFI_MODE_AP
#elif defined(CONFIG_WIFI_MODE_CLIENT)
#  define DEFAULT_WIFI_MODE       WIFI_MODE_CLIENT
#else
#  error "No default wifi mode defined in configuration"
#endif

#ifdef CONFIG_ENABLE_FC_POWER_MANAGEMENT

//-- The GPIO output pin that can be used to turn the flight controller on/off.
#define FC_POWER_CONTROL_PIN CONFIG_FC_POWER_CONTROL_PIN

// -- Set this to HIGH or LOW depending on whether the flight controller is
// -- powered on when the pin is HIGH or LOW. When the power management module
// -- is pulse-triggered, set this value to HIGH if you want to keep the line
// -- low in general and pull it to high during the pulse that triggers the
// -- power management module.
#ifdef FC_POWER_CONTROL_PIN_INVERTED
#  define FC_POWER_CONTROL_PIN_ACTIVE_STATE LOW
#else
#  define FC_POWER_CONTROL_PIN_ACTIVE_STATE HIGH
#endif
 
// -- Set this value to nonzero to instruct the firmware to send a pulse with
// -- the given minimum length if the FC power needs to be toggled.
#define FC_POWER_CONTROL_PIN_PULSE_LENGTH_MSEC CONFIG_FC_POWER_CONTROL_PIN_PULSE_LENGTH_MSEC
 
//-- Set this to the GPIO input pin that can be used to decide whether the
//-- flight controller is powered by reading from it. Do not define it if you
//-- do not have such a GPIO pin - in this case, if the pulse length is zero,
//-- we will attempt reading from the FC_POWER_CONTROL_PIN instead
#ifdef CONFIG_FC_POWER_QUERY_PIN
#define FC_POWER_QUERY_PIN CONFIG_FC_POWER_QUERY_PIN
#endif

//-- Uncomment this to simulate heartbeats even when the FC is powered down
#ifdef CONFIG_SIMULATE_HEARTBEATS_WHEN_POWERED_OFF
#  define SIMULATE_HEARTBEATS_WHEN_POWERED_OFF
#endif

#endif

//-- The version is set from the build system (major, minor and build)
#define MAVESP8266_VERSION          ((MAVESP8266_VERSION_MAJOR << 24) & 0xFF00000) | ((MAVESP8266_VERSION_MINOR << 16) & 0x00FF0000) | (MAVESP8266_VERSION_BUILD & 0xFFFF)
 
//-- Debug sent out to Serial1 (GPIO02), which is TX only (no RX).
#ifdef CONFIG_ENABLE_DEBUG
#  define ENABLE_DEBUG
#endif

#endif   // MAVESP8266_CONFIG_H
